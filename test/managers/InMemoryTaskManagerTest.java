package managers;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import tasks.Epic;
import tasks.ProgressStatus;
import tasks.Subtask;
import tasks.Task;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class InMemoryTaskManagerTest {
    
    private InMemoryTaskManager taskManager;
    private static Task task;
    private static Epic epic;
    
    @BeforeAll
    static void beforeAll() {
        task = new Task("Задача", "Описание задачи", ProgressStatus.NEW);
        epic = new Epic("Эпик", "Описание эпика");
    }
    
    @BeforeEach
    void beforeEach() {
        taskManager = new InMemoryTaskManager();
    }
    
    @Test
    void shouldCreateTaskAndFindById() {
        Task createdTask = taskManager.createTask(task);
        
        assertNotNull(createdTask, "Созданная задача равна null");
        assertTrue(createdTask.getId() > 0, "ID созданной задачи не больше 0");
        
        Task foundTask = taskManager.getTaskById(createdTask.getId());
        
        assertNotNull(foundTask, "Найденная задача равна null");
        assertEquals(createdTask.getName(), foundTask.getName(), "Имена созданной и найденной задачи не совпадают");
    }
    
    @Test
    void shouldCreateEpicAndFindById() {
        Epic createdEpic = taskManager.createEpic(epic);
        
        assertNotNull(createdEpic, "Созданный эпик равен null");
        assertTrue(createdEpic.getId() > 0, "ID созданного эпика не больше 0");
        
        Epic foundEpic = taskManager.getEpicById(createdEpic.getId());
        
        assertNotNull(foundEpic, "Найденный эпик равен null");
        assertEquals(createdEpic.getName(), foundEpic.getName(), "Имена созданного и найденного эпика не совпадают");
    }
    
    @Test
    void shouldCreateSubtaskAndFindById() {
        Epic createdEpic = taskManager.createEpic(epic);
        Subtask subtask = new Subtask("Подзадача", "Описание подзадачи", ProgressStatus.NEW, createdEpic.getId());
        
        Subtask createdSubtask = taskManager.createSubtask(subtask);
        
        assertNotNull(createdSubtask, "Созданная подзадача равна null");
        assertTrue(createdSubtask.getId() > 0, "ID созданной подзадачи не больше 0");
        assertEquals(createdEpic.getId(), createdSubtask.getEpicId(), "ID эпика в подзадаче не совпадает с ID созданного эпика");
        
        Subtask foundSubtask = taskManager.getSubtaskById(createdSubtask.getId());
        
        assertNotNull(foundSubtask, "Найденная подзадача равна null");
        assertEquals(createdSubtask.getName(), foundSubtask.getName(), "Имена созданной и найденной подзадачи не совпадают");
    }

    @Test 
    void shouldNotConflictBetweenManualAndAutoGeneratedIds() {
        Task autoIdTask = taskManager.createTask(task);
        Task manualIdTask = new Task(task, autoIdTask.getId());
        Task createdManualTask = taskManager.createTask(manualIdTask);
        
        assertEquals(2, createdManualTask.getId(), "ID задачи с ручным ID=1 не равен 2");
        assertEquals(2, taskManager.getTasks().size(), "Количество задач в менеджере не равно 2");
    }

    @Test
    void shouldNotChangeTaskFieldsWhenAddedToManager() {
        String originalName = task.getName();
        String originalDescription = task.getDescription();
        ProgressStatus originalStatus = task.getStatus();
        
        Task createdTask = taskManager.createTask(task);
        Task retrievedTask = taskManager.getTaskById(createdTask.getId());
        
        assertEquals(originalName, retrievedTask.getName(), "Имя задачи изменилось при добавлении в менеджер");
        assertEquals(originalDescription, retrievedTask.getDescription(), "Описание задачи изменилось при добавлении в менеджер");
        assertEquals(originalStatus, retrievedTask.getStatus(), "Статус задачи изменился при добавлении в менеджер");
    }

    @Test
    void shouldPreservePreviousVersionOfTaskInHistory() {
        Task createdTask = taskManager.createTask(task);
        createdTask = taskManager.getTaskById(createdTask.getId());

        String originalName = createdTask.getName();
        String originalDescription = createdTask.getDescription();
        ProgressStatus originalStatus = createdTask.getStatus();

        createdTask.setName("Измененное имя");
        createdTask.setDescription("Измененное описание");
        createdTask.setStatus(ProgressStatus.DONE);

        taskManager.updateTask(createdTask);

        List<Task> history = taskManager.getTasksHistoryList();
        Task taskFromHistory = history.getLast();

        assertEquals(originalName, taskFromHistory.getName(), "Имя задачи в истории изменилось после обновления");
        assertEquals(originalDescription, taskFromHistory.getDescription(), "Описание задачи в истории изменилось после обновления");
        assertEquals(originalStatus, taskFromHistory.getStatus(), "Статус задачи в истории изменился после обновления");
    }
}